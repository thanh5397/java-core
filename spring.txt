cày java spring boot
Web.xml được định nghĩa ánh xạ giữa đường dẫn URL và servlet xử lý các yêu cầu với các đường dẫn đó. 
File web.xml cung cấp thông tin triển khai và cấu hình cho các thành phần Web bao gồm một ứng dụng Web. 
Các file servlet được mô tả trong web.xml.Nó đại diện cho cốt lõi của ứng dụng java.
File web.xml nằm trong thư mục WEB-INF của ứng dụng web.

+ học lại hết sql
++Không phải tự nghĩ,mà là làm theo người ta
@Component: là một annotation của class.
 Nó dùng để đánh dấu class Java là một bean.
 Một class Java được đánh dấu @Component được tìm thấy trong classpath. 
 Spring Framework chọn nó và cấu hình trong ngữ cảnh ứng dụng như một Spring Bean.
 
Spring Beans chính là những Java Object mà từ đó tạo nên khung sườn của một Spring application.Chúng được cài đặt, lắp ráp và quản lý bởi Spring IoC container. Những bean này được tạo ra bởi configuration metadata được cung cấp từ container, ví dụ, trong tag nằm trong file XML.

Spring Beans
Các bean được define trong spring framework là singleton bean.
 Có một thuộc trính trong bean với tên là “singleton” nếu được gán giá trị là true thì bean đó sẽ trở thành singleton, nếu là false thì bean đó sẽ trở thành prototype bean. 
 Mặc định nếu không được định nghĩa giá trị của nó sẽ là true. 
 Vì thế tất cả các bean trong spring framework mặc định sẽ là singleton bean.
 
 Caused by: java.lang.IllegalStateException: Cannot load driver class: com.mysql.cj.jdbc.Driver
 lỗi thiếu thư viện mysql
 
 getter-setter
 
 @RequestMapping: nó được sử dụng để map các request. Nó có nhiều phần tử tùy chọn như consumes, header, method, name, params, path, produces, và value. Chúng tôi sử dụng nó với lớp cũng như phương thức.
 
 Lộ trình: Cày xong bài manageuser
 + code ListUser,de vcl luon
 + code API get,post,put,delete
 biz-page:code admin:chủ yếu là nhiều,chứ độ khó thì ít
 +update cv
 +rai cv
 
--@RequestBody được dùng để ánh xạ HttpRequest body sang một domain object tự động.

Giả sử chúng ta có Spring controller với login() method nhận vào LoginForm object.

@RestController
public class RequestBodyExampleController {
    @PostMapping("/login")
    public ResponseEntity login (@RequestBody LoginForm form) {
        System.out.println("User name: " + form.getUsername());
        System.out.println("Password: " + form.getPassword());
        return ResponseEntity.ok(HttpStatus.OK);
    }
}
Spring sẽ tự động ánh xạ dữ liệu JSON trong  HttpRequest body sang một Java Type object tương ứng.

Mặc định, tên và kiểu dữ liệu trong JSON phải trùng khớp với tên và kiểu dữ liệu trong Java Type object. 

--@ResponseBody annotation được dùng để thông báo với controller rằng Java Object trả về cho client sẽ tự động ánh xạ sang JSON và chuyển vào HttpResponse.

 
